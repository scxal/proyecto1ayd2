/* The following code was generated by JFlex 1.6.0 */

package Parsers;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>Escaner.jflex</tt>
 */
public class lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\50\1\50\1\52\1\50\1\50\22\0\1\51\1\0\1\40"+
    "\11\0\1\36\1\24\1\41\1\15\12\46\1\41\1\27\1\1\1\37"+
    "\1\14\2\0\1\3\1\2\1\4\1\13\1\21\1\16\1\6\1\26"+
    "\1\43\1\45\1\42\1\31\1\32\1\12\1\10\1\25\1\33\1\7"+
    "\1\44\1\20\1\11\1\30\1\45\1\23\2\45\4\0\1\47\1\0"+
    "\1\3\1\2\1\4\1\13\1\21\1\16\1\6\1\26\1\43\1\45"+
    "\1\42\1\31\1\32\1\12\1\10\1\25\1\33\1\7\1\44\1\20"+
    "\1\11\1\30\1\45\1\23\2\45\1\34\1\45\1\35\7\0\1\52"+
    "\252\0\2\17\115\0\1\22\u1ea8\0\1\52\1\52\u0100\0\1\5\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\3\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\32\0\1\11\24\0\1\12\46\0\1\13"+
    "\1\0\1\14\15\0\1\15\7\0\1\16\2\0\1\17"+
    "\4\0\1\20\1\21\1\22\2\0\1\23\2\0\1\24"+
    "\1\25\5\0\1\26\1\27\1\30\10\0\1\31\1\0"+
    "\1\32\1\33\5\0\1\34\5\0\1\35\1\0\1\36"+
    "\2\0\1\37\1\0\1\40";

  private static int [] zzUnpackAction() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\53\0\53\0\53\0\53"+
    "\0\254\0\327\0\u0102\0\u012d\0\u0158\0\u0183\0\u01ae\0\u01d9"+
    "\0\u0204\0\u022f\0\u025a\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331"+
    "\0\u035c\0\u0387\0\u03b2\0\u03dd\0\u0408\0\u0433\0\u045e\0\u0489"+
    "\0\u04b4\0\u04df\0\u050a\0\u0535\0\u0560\0\u058b\0\53\0\u05b6"+
    "\0\u05e1\0\u060c\0\u0637\0\u0662\0\u068d\0\u06b8\0\u06e3\0\u070e"+
    "\0\u0739\0\u0764\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b\0\u0866"+
    "\0\u0891\0\u08bc\0\u08e7\0\53\0\u0912\0\u093d\0\u0968\0\u0993"+
    "\0\u09be\0\u09e9\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0\0\u0aeb"+
    "\0\u0b16\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed\0\u0c18\0\u0c43"+
    "\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45\0\u0d70\0\u0d9b"+
    "\0\u0dc6\0\u0df1\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d\0\u0ec8\0\u0ef3"+
    "\0\u0f1e\0\u0f49\0\53\0\u0f74\0\53\0\u0f9f\0\u0fca\0\u0ff5"+
    "\0\u1020\0\u104b\0\u1076\0\u10a1\0\u10cc\0\u10f7\0\u1122\0\u114d"+
    "\0\u1178\0\u11a3\0\53\0\u11ce\0\u11f9\0\u1224\0\u124f\0\u127a"+
    "\0\u12a5\0\u12d0\0\53\0\u12fb\0\u1326\0\53\0\u1351\0\u137c"+
    "\0\u13a7\0\u13d2\0\53\0\53\0\53\0\u13fd\0\u1428\0\53"+
    "\0\u1453\0\u147e\0\53\0\53\0\u14a9\0\u14d4\0\u14ff\0\u152a"+
    "\0\u1555\0\53\0\53\0\53\0\u1580\0\u15ab\0\u15d6\0\u1601"+
    "\0\u162c\0\u1657\0\u1682\0\u16ad\0\53\0\u16d8\0\53\0\53"+
    "\0\u1703\0\u172e\0\u1759\0\u1784\0\u17af\0\53\0\u17da\0\u1805"+
    "\0\u1830\0\u185b\0\u1886\0\53\0\u18b1\0\53\0\u18dc\0\u1907"+
    "\0\53\0\u1932\0\53";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\21\2\1\4\3\2\1\5\4\2\1\6"+
    "\1\7\1\10\1\11\1\12\5\2\1\13\1\2\2\14"+
    "\56\0\1\15\1\0\1\16\6\0\1\17\1\0\1\20"+
    "\1\21\60\0\1\22\30\0\3\23\1\0\6\23\2\0"+
    "\1\23\1\0\2\23\1\0\1\23\1\0\2\23\1\0"+
    "\4\23\6\0\4\23\3\0\1\23\3\0\3\24\1\0"+
    "\6\24\1\0\2\24\1\0\2\24\1\0\1\24\1\0"+
    "\2\24\1\0\4\24\2\0\1\24\2\0\6\24\2\0"+
    "\1\24\47\0\1\13\54\0\2\14\4\0\1\25\57\0"+
    "\1\26\63\0\1\27\33\0\1\30\1\0\1\31\6\0"+
    "\1\32\2\0\1\33\53\0\1\34\23\0\1\34\11\0"+
    "\1\35\1\36\1\37\5\0\1\40\1\41\3\0\1\42"+
    "\1\43\5\0\1\44\1\0\1\45\1\0\1\46\10\0"+
    "\1\42\11\0\3\23\1\0\6\23\2\0\1\23\1\0"+
    "\2\23\1\0\1\23\1\0\2\23\1\47\4\23\6\0"+
    "\6\23\1\0\1\23\3\0\3\24\1\0\6\24\1\0"+
    "\2\24\1\0\2\24\1\0\1\24\1\0\2\24\1\0"+
    "\4\24\2\0\1\24\1\0\1\50\6\24\2\0\1\24"+
    "\5\0\1\51\60\0\1\52\62\0\1\53\21\0\1\53"+
    "\11\0\1\54\57\0\1\55\63\0\1\56\50\0\1\57"+
    "\23\0\1\57\15\0\1\60\54\0\1\61\20\0\1\62"+
    "\30\0\1\63\52\0\1\64\53\0\1\65\63\0\1\66"+
    "\63\0\1\67\37\0\1\70\23\0\1\70\30\0\1\71"+
    "\50\0\1\72\23\0\1\72\30\0\1\73\60\0\1\74"+
    "\30\0\1\75\34\0\1\75\26\0\1\76\53\0\1\77"+
    "\23\0\1\77\13\0\1\100\60\0\1\101\62\0\1\102"+
    "\21\0\1\102\14\0\1\103\55\0\1\104\53\0\1\105"+
    "\17\0\1\106\30\0\1\107\74\0\1\110\41\0\1\111"+
    "\63\0\1\112\42\0\1\113\21\0\1\113\11\0\1\114"+
    "\74\0\1\115\34\0\1\116\56\0\1\117\15\0\1\120"+
    "\41\0\1\121\40\0\1\122\63\0\1\123\23\0\1\123"+
    "\15\0\1\124\51\0\1\125\34\0\1\125\26\0\1\126"+
    "\53\0\1\127\23\0\1\127\20\0\1\130\50\0\1\131"+
    "\54\0\1\132\43\0\1\133\103\0\1\134\22\0\1\135"+
    "\62\0\1\136\41\0\1\137\54\0\1\140\13\0\1\141"+
    "\40\0\1\142\54\0\1\143\52\0\1\144\45\0\1\145"+
    "\100\0\1\146\24\0\1\147\56\0\1\150\51\0\1\151"+
    "\56\0\1\152\46\0\1\153\63\0\1\154\23\0\1\154"+
    "\15\0\1\155\53\0\1\156\64\0\1\157\53\0\1\160"+
    "\21\0\1\160\11\0\1\161\60\0\1\162\70\0\1\163"+
    "\42\0\1\164\23\0\1\164\16\0\1\165\52\0\1\166"+
    "\52\0\1\167\64\0\1\170\52\0\1\171\34\0\1\172"+
    "\76\0\1\173\33\0\1\174\53\0\1\175\55\0\1\176"+
    "\45\0\1\177\51\0\1\200\56\0\1\201\61\0\1\202"+
    "\45\0\1\203\65\0\1\204\52\0\1\205\44\0\1\206"+
    "\51\0\1\207\53\0\1\210\50\0\1\211\23\0\1\211"+
    "\20\0\1\212\53\0\1\213\67\0\1\214\35\0\1\215"+
    "\51\0\1\216\50\0\1\217\53\0\1\220\53\0\1\221"+
    "\55\0\1\222\52\0\1\223\65\0\1\224\33\0\1\225"+
    "\67\0\1\226\44\0\1\227\23\0\1\227\17\0\1\230"+
    "\54\0\1\231\43\0\1\232\60\0\1\233\50\0\1\234"+
    "\65\0\1\235\21\0\1\235\12\0\1\236\55\0\1\237"+
    "\72\0\1\240\36\0\1\241\57\0\1\242\44\0\1\243"+
    "\43\0\1\244\66\0\1\245\23\0\1\245\23\0\1\246"+
    "\55\0\1\247\23\0\1\247\22\0\1\250\57\0\1\251"+
    "\42\0\1\252\52\0\1\253\56\0\1\254\55\0\1\255"+
    "\23\0\1\255\21\0\1\256\52\0\1\257\50\0\1\260"+
    "\56\0\1\261\50\0\1\262\54\0\1\263\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6493];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\4\11\4\1\32\0\1\11\24\0"+
    "\1\11\46\0\1\11\1\0\1\11\15\0\1\11\7\0"+
    "\1\11\2\0\1\11\4\0\3\11\2\0\1\11\2\0"+
    "\2\11\5\0\3\11\10\0\1\11\1\0\2\11\5\0"+
    "\1\11\5\0\1\11\1\0\1\11\2\0\1\11\1\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public lexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 212) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { compi1_proyecto1.Compi1_Proyecto1.erroresLex1.add(new compi1_proyecto1.Error(yytext(),yycolumn, yyline));
          }
        case 33: break;
        case 2: 
          { return new Symbol(tabla_simbolos.puntoComa, yycolumn,yyline,new String(yytext()));
          }
        case 34: break;
        case 3: 
          { return new Symbol(tabla_simbolos.acorchete, yycolumn,yyline,new String(yytext()));
          }
        case 35: break;
        case 4: 
          { return new Symbol(tabla_simbolos.ccorchete, yycolumn,yyline,new String(yytext()));
          }
        case 36: break;
        case 5: 
          { return new Symbol(tabla_simbolos.coma, yycolumn,yyline,new String(yytext()));
          }
        case 37: break;
        case 6: 
          { return new Symbol(tabla_simbolos.igual, yycolumn,yyline,new String(yytext()));
          }
        case 38: break;
        case 7: 
          { return new Symbol(tabla_simbolos.numero, yycolumn,yyline,new String(yytext()));
          }
        case 39: break;
        case 8: 
          { /* Se ignoran */
          }
        case 40: break;
        case 9: 
          { return new Symbol(tabla_simbolos.pxnombre, yycolumn,yyline,new String(yytext()));
          }
        case 41: break;
        case 10: 
          { return new Symbol(tabla_simbolos.comilla, yycolumn,yyline,new String(yytext()));
          }
        case 42: break;
        case 11: 
          { return new Symbol(tabla_simbolos.xtipo, yycolumn,yyline,new String(yytext()));
          }
        case 43: break;
        case 12: 
          { return new Symbol(tabla_simbolos.xvida, yycolumn,yyline,new String(yytext()));
          }
        case 44: break;
        case 13: 
          { return new Symbol(tabla_simbolos.xarma, yycolumn,yyline,new String(yytext()));
          }
        case 45: break;
        case 14: 
          { return new Symbol(tabla_simbolos.xmeta, yycolumn,yyline,new String(yytext()));
          }
        case 46: break;
        case 15: 
          { return new Symbol(tabla_simbolos.adesign, yycolumn,yyline,new String(yytext()));
          }
        case 47: break;
        case 16: 
          { return new Symbol(tabla_simbolos.afig, yycolumn,yyline,new String(yytext()));
          }
        case 48: break;
        case 17: 
          { return new Symbol(tabla_simbolos.xbonus, yycolumn,yyline,new String(yytext()));
          }
        case 49: break;
        case 18: 
          { return new Symbol(tabla_simbolos.xbomba, yycolumn,yyline,new String(yytext()));
          }
        case 50: break;
        case 19: 
          { return new Symbol(tabla_simbolos.xnombre, yycolumn,yyline,new String(yytext()));
          }
        case 51: break;
        case 20: 
          { return new Symbol(tabla_simbolos.ximg, yycolumn,yyline,new String(yytext()));
          }
        case 52: break;
        case 21: 
          { return new Symbol(tabla_simbolos.xheroe, yycolumn,yyline,new String(yytext()));
          }
        case 53: break;
        case 22: 
          { return new Symbol(tabla_simbolos.cdesign, yycolumn,yyline,new String(yytext()));
          }
        case 54: break;
        case 23: 
          { return new Symbol(tabla_simbolos.cfig, yycolumn,yyline,new String(yytext()));
          }
        case 55: break;
        case 24: 
          { return new Symbol(tabla_simbolos.xbloque, yycolumn,yyline,new String(yytext()));
          }
        case 56: break;
        case 25: 
          { return new Symbol(tabla_simbolos.xcreditos, yycolumn,yyline,new String(yytext()));
          }
        case 57: break;
        case 26: 
          { return new Symbol(tabla_simbolos.xdestruir, yycolumn,yyline,new String(yytext()));
          }
        case 58: break;
        case 27: 
          { return new Symbol(tabla_simbolos.xenemigo, yycolumn,yyline,new String(yytext()));
          }
        case 59: break;
        case 28: 
          { return new Symbol(tabla_simbolos.aback, yycolumn,yyline,new String(yytext()));
          }
        case 60: break;
        case 29: 
          { return new Symbol(tabla_simbolos.cback, yycolumn,yyline,new String(yytext()));
          }
        case 61: break;
        case 30: 
          { return new Symbol(tabla_simbolos.xdescripcion, yycolumn,yyline,new String(yytext()));
          }
        case 62: break;
        case 31: 
          { return new Symbol(tabla_simbolos.aconfig, yycolumn,yyline,new String(yytext()));
          }
        case 63: break;
        case 32: 
          { return new Symbol(tabla_simbolos.cconfig, yycolumn,yyline,new String(yytext()));
          }
        case 64: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(tabla_simbolos.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
