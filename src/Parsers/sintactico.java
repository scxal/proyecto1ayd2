//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------
package Parsers;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/**
 * CUP v0.11b 20141202 (SVN rev 60) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class sintactico extends java_cup.runtime.lr_parser {

    public final Class getSymbolContainer() {
        return tabla_simbolos.class;
    }

    /**
     * Default constructor.
     */
    public sintactico() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    public sintactico(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][]
            = unpackFromStrings(new String[]{
                "\000\075\000\002\002\004\000\002\002\003\000\002\016"
                + "\005\000\002\003\004\000\002\003\004\000\002\003\004"
                + "\000\002\004\004\000\002\004\004\000\002\005\004\000"
                + "\002\005\004\000\002\006\004\000\002\006\004\000\002"
                + "\033\002\000\002\007\006\000\002\014\005\000\002\010"
                + "\003\000\002\010\004\000\002\011\005\000\002\011\004"
                + "\000\002\011\005\000\002\034\002\000\002\011\007\000"
                + "\002\035\002\000\002\011\007\000\002\012\003\000\002"
                + "\012\003\000\002\012\003\000\002\012\003\000\002\012"
                + "\003\000\002\013\003\000\002\036\002\000\002\013\006"
                + "\000\002\037\002\000\002\024\005\000\002\025\004\000"
                + "\002\026\005\000\002\026\005\000\002\027\004\000\002"
                + "\030\005\000\002\040\002\000\002\031\005\000\002\032"
                + "\004\000\002\032\003\000\002\041\002\000\002\015\006"
                + "\000\002\017\005\000\002\020\003\000\002\020\004\000"
                + "\002\042\002\000\002\021\007\000\002\021\005\000\002"
                + "\043\002\000\002\021\007\000\002\021\004\000\002\021"
                + "\005\000\002\021\005\000\002\022\003\000\002\022\003"
                + "\000\002\023\003\000\002\044\002\000\002\023\006"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table
            = unpackFromStrings(new String[]{
                "\000\167\000\004\034\005\001\002\000\004\002\171\001"
                + "\002\000\010\004\014\014\011\024\012\001\002\000\004"
                + "\002\000\001\002\000\004\036\170\001\002\000\006\014"
                + "\011\024\012\001\002\000\004\025\uffd6\001\002\000\004"
                + "\025\uffe1\001\002\000\006\004\014\014\011\001\002\000"
                + "\004\025\ufff5\001\002\000\006\004\014\024\012\001\002"
                + "\000\004\024\012\001\002\000\004\004\014\001\002\000"
                + "\004\036\ufffd\001\002\000\004\036\ufff9\001\002\000\004"
                + "\036\ufff8\001\002\000\004\025\025\001\002\000\004\005"
                + "\065\001\002\000\014\006\032\017\034\031\033\032\031"
                + "\040\026\001\002\000\004\033\061\001\002\000\004\026"
                + "\055\001\002\000\016\006\032\017\034\026\ufff2\031\033"
                + "\032\031\040\026\001\002\000\004\033\051\001\002\000"
                + "\004\033\045\001\002\000\004\030\044\001\002\000\004"
                + "\033\035\001\002\000\014\007\040\010\042\011\037\012"
                + "\043\013\041\001\002\000\016\006\uffee\017\uffee\026\uffee"
                + "\031\uffee\032\uffee\040\uffee\001\002\000\016\006\uffe7\017"
                + "\uffe7\026\uffe7\031\uffe7\032\uffe7\040\uffe7\001\002\000\016"
                + "\006\uffe9\017\uffe9\026\uffe9\031\uffe9\032\uffe9\040\uffe9\001"
                + "\002\000\016\006\uffe5\017\uffe5\026\uffe5\031\uffe5\032\uffe5"
                + "\040\uffe5\001\002\000\016\006\uffe8\017\uffe8\026\uffe8\031"
                + "\uffe8\032\uffe8\040\uffe8\001\002\000\016\006\uffe6\017\uffe6"
                + "\026\uffe6\031\uffe6\032\uffe6\040\uffe6\001\002\000\016\006"
                + "\uffef\017\uffef\026\uffef\031\uffef\032\uffef\040\uffef\001\002"
                + "\000\004\023\046\001\002\000\004\022\uffeb\001\002\000"
                + "\004\022\050\001\002\000\016\006\uffea\017\uffea\026\uffea"
                + "\031\uffea\032\uffea\040\uffea\001\002\000\004\016\052\001"
                + "\002\000\016\006\ufff0\017\ufff0\026\ufff0\031\ufff0\032\ufff0"
                + "\040\ufff0\001\002\000\004\026\ufff1\001\002\000\004\005"
                + "\ufff3\001\002\000\006\005\uffe4\027\uffe3\001\002\000\004"
                + "\027\057\001\002\000\004\025\025\001\002\000\004\005"
                + "\uffe2\001\002\000\004\023\062\001\002\000\004\022\uffed"
                + "\001\002\000\004\022\064\001\002\000\016\006\uffec\017"
                + "\uffec\026\uffec\031\uffec\032\uffec\040\uffec\001\002\000\010"
                + "\014\ufff4\024\ufff4\036\ufff4\001\002\000\004\014\011\001"
                + "\002\000\004\004\014\001\002\000\004\036\ufffe\001\002"
                + "\000\004\036\ufffb\001\002\000\004\036\ufffa\001\002\000"
                + "\004\025\075\001\002\000\010\004\uffe0\014\uffe0\036\uffe0"
                + "\001\002\000\006\031\100\032\077\001\002\000\010\004"
                + "\uffdf\014\uffdf\036\uffdf\001\002\000\004\033\116\001\002"
                + "\000\004\030\115\001\002\000\004\031\100\001\002\000"
                + "\004\032\077\001\002\000\004\026\104\001\002\000\006"
                + "\027\uffda\035\uffda\001\002\000\010\004\uffde\014\uffde\036"
                + "\uffde\001\002\000\006\027\110\035\107\001\002\000\010"
                + "\004\uffd7\014\uffd7\036\uffd7\001\002\000\004\025\075\001"
                + "\002\000\010\004\uffd9\014\uffd9\036\uffd9\001\002\000\010"
                + "\004\uffd8\014\uffd8\036\uffd8\001\002\000\004\026\104\001"
                + "\002\000\010\004\uffdd\014\uffdd\036\uffdd\001\002\000\006"
                + "\026\uffdc\032\uffdc\001\002\000\004\016\117\001\002\000"
                + "\006\026\uffdb\031\uffdb\001\002\000\004\025\122\001\002"
                + "\000\004\015\162\001\002\000\016\017\132\031\131\032"
                + "\127\037\124\040\123\041\125\001\002\000\004\033\156"
                + "\001\002\000\004\033\154\001\002\000\004\033\150\001"
                + "\002\000\020\017\132\026\uffd3\031\131\032\127\037\124"
                + "\040\123\041\125\001\002\000\004\033\145\001\002\000"
                + "\004\026\140\001\002\000\004\030\137\001\002\000\004"
                + "\033\133\001\002\000\006\020\136\021\135\001\002\000"
                + "\020\017\uffcf\026\uffcf\031\uffcf\032\uffcf\037\uffcf\040\uffcf"
                + "\041\uffcf\001\002\000\020\017\uffc8\026\uffc8\031\uffc8\032"
                + "\uffc8\037\uffc8\040\uffc8\041\uffc8\001\002\000\020\017\uffc9"
                + "\026\uffc9\031\uffc9\032\uffc9\037\uffc9\040\uffc9\041\uffc9\001"
                + "\002\000\020\017\uffcc\026\uffcc\031\uffcc\032\uffcc\037\uffcc"
                + "\040\uffcc\041\uffcc\001\002\000\006\015\uffc7\027\uffc6\001"
                + "\002\000\004\015\uffd4\001\002\000\004\027\143\001\002"
                + "\000\004\025\122\001\002\000\004\015\uffc5\001\002\000"
                + "\004\016\146\001\002\000\020\017\uffcb\026\uffcb\031\uffcb"
                + "\032\uffcb\037\uffcb\040\uffcb\041\uffcb\001\002\000\004\026"
                + "\uffd2\001\002\000\004\023\151\001\002\000\004\022\uffce"
                + "\001\002\000\004\022\153\001\002\000\020\017\uffcd\026"
                + "\uffcd\031\uffcd\032\uffcd\037\uffcd\040\uffcd\041\uffcd\001\002"
                + "\000\004\016\155\001\002\000\020\017\uffca\026\uffca\031"
                + "\uffca\032\uffca\037\uffca\040\uffca\041\uffca\001\002\000\004"
                + "\023\157\001\002\000\004\022\uffd1\001\002\000\004\022"
                + "\161\001\002\000\020\017\uffd0\026\uffd0\031\uffd0\032\uffd0"
                + "\037\uffd0\040\uffd0\041\uffd0\001\002\000\010\004\uffd5\024"
                + "\uffd5\036\uffd5\001\002\000\004\014\011\001\002\000\004"
                + "\036\ufffc\001\002\000\004\024\012\001\002\000\004\036"
                + "\ufff6\001\002\000\004\036\ufff7\001\002\000\004\002\uffff"
                + "\001\002\000\004\002\001\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /**
     * <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table
            = unpackFromStrings(new String[]{
                "\000\167\000\006\002\003\016\005\001\001\000\002\001"
                + "\001\000\012\003\006\007\007\015\014\024\012\001\001"
                + "\000\002\001\001\000\002\001\001\000\010\006\163\015"
                + "\164\024\162\001\001\000\004\041\117\001\001\000\004"
                + "\037\072\001\001\000\010\004\067\007\065\015\066\001"
                + "\001\000\004\033\022\001\001\000\010\005\017\007\015"
                + "\024\016\001\001\000\004\024\021\001\001\000\004\007"
                + "\020\001\001\000\002\001\001\000\002\001\001\000\002"
                + "\001\001\000\004\014\023\001\001\000\002\001\001\000"
                + "\006\010\026\011\027\001\001\000\002\001\001\000\004"
                + "\013\053\001\001\000\006\010\052\011\027\001\001\000"
                + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
                + "\001\001\000\004\012\035\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\004\035\046\001\001\000\002\001\001\000\002"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\002\001\001\000\004\036\055\001\001\000\002"
                + "\001\001\000\004\014\057\001\001\000\002\001\001\000"
                + "\002\001\001\000\004\034\062\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\004\015\071\001"
                + "\001\000\004\007\070\001\001\000\002\001\001\000\002"
                + "\001\001\000\002\001\001\000\004\025\073\001\001\000"
                + "\002\001\001\000\010\026\075\027\101\030\100\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\004\027\112\001\001\000\004\030\102\001\001\000\004"
                + "\031\104\001\001\000\004\040\105\001\001\000\002\001"
                + "\001\000\004\032\110\001\001\000\002\001\001\000\004"
                + "\025\111\001\001\000\002\001\001\000\002\001\001\000"
                + "\004\031\113\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\004\017\120\001"
                + "\001\000\002\001\001\000\006\020\127\021\125\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\006\020\146\021\125\001\001\000\002\001\001\000\004"
                + "\023\140\001\001\000\002\001\001\000\002\001\001\000"
                + "\004\022\133\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\004\044\141\001"
                + "\001\000\002\001\001\000\002\001\001\000\004\017\143"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\004\043\151"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\004\042\157"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\004\015\166\001\001\000\002\001\001\000\004"
                + "\024\165\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$sintactico$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$sintactico$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /**
     * <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /**
     * <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

    /**
     * Metodo al que se llama automáticamente ante algún error sintactico.
     */
    public void syntax_error(Symbol s) {
        compi1_proyecto1.Menu.erroresText.setText(compi1_proyecto1.Menu.erroresText.getText().concat("\nError en la Línea " + (s.right + 1) + ". Columna " + s.left + ". Identificador " + s.value + " no reconocido."));
        compi1_proyecto1.Compi1_Proyecto1.clearListas();
    }

    /**
     * Metodo al que se llama en el momento en que ya no es posible una
     * recuperación de errores.
     */
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        compi1_proyecto1.Menu.erroresText.setText(compi1_proyecto1.Menu.erroresText.getText().concat("\nError en la Línea " + (s.right + 1) + ". Columna " + s.left + ". Identificador " + s.value + " no reconocido."));
        compi1_proyecto1.Compi1_Proyecto1.clearListas();
    }

    /**
     * Cup generated class to encapsulate user supplied action code.
     */
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$sintactico$actions {

        private final sintactico parser;

        /**
         * Constructor
         */
        CUP$sintactico$actions(sintactico parser) {
            this.parser = parser;
        }

        /**
         * Method 0 with the actual generated action code for actions 0 to 300.
         */
        public final java_cup.runtime.Symbol CUP$sintactico$do_action_part00000000(
                int CUP$sintactico$act_num,
                java_cup.runtime.lr_parser CUP$sintactico$parser,
                java.util.Stack CUP$sintactico$stack,
                int CUP$sintactico$top)
                throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$sintactico$result;

            /* select the action based on the action number */
            switch (CUP$sintactico$act_num) {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // $START ::= INICIA EOF 
                {
                    Object RESULT = null;
                    int start_valleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int start_valright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    RESULT = start_val;
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$sintactico$parser.done_parsing();
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // INICIA ::= S 
                {
                    Object RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INICIA", 0, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // S ::= aconfig A cconfig 
                {
                    Object RESULT = null;
                    compi1_proyecto1.Compi1_Proyecto1.mostrar();
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("S", 12, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // A ::= BACK_A AA 
                {
                    Object RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("A", 1, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // A ::= FIG_START AB 
                {
                    Object RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("A", 1, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // A ::= DESIGN_START AC 
                {
                    Object RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("A", 1, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // AA ::= FIG_START DESIGN_START 
                {
                    Object RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AA", 2, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // AA ::= DESIGN_START FIG_START 
                {
                    Object RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AA", 2, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // AB ::= BACK_A DESIGN_START 
                {
                    Object RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AB", 3, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // AB ::= DESIGN_START BACK_A 
                {
                    Object RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AB", 3, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // AC ::= BACK_A FIG_START 
                {
                    Object RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AC", 4, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // AC ::= FIG_START BACK_A 
                {
                    Object RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AC", 4, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // NT$0 ::= 
                {
                    Object RESULT = null;
                    compi1_proyecto1.Compi1_Proyecto1.updateCategoria("design");
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("NT$0", 25, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // DESIGN_START ::= adesign NT$0 DESIGN_A cdesign 
                {
                    Object RESULT = null;
                    // propagate RESULT from NT$0
                    RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DESIGN_START", 5, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // DESIGN_A ::= acorchete DESIGN_B DESIGN_V 
                {
                    Object RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DESIGN_A", 10, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // DESIGN_B ::= DESIGN_X 
                {
                    Object RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DESIGN_B", 6, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // DESIGN_B ::= DESIGN_X DESIGN_B 
                {
                    Object RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DESIGN_B", 6, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // DESIGN_X ::= ximg igual comilla 
                {
                    Object RESULT = null;
                    compi1_proyecto1.Compi1_Proyecto1.updateImg((String) (((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value));
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DESIGN_X", 7, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // DESIGN_X ::= xnombre pxnombre 
                {
                    Object RESULT = null;
                    compi1_proyecto1.Compi1_Proyecto1.updateName((String) (((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value));
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DESIGN_X", 7, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // DESIGN_X ::= xtipo igual DESIGN_Y 
                {
                    Object RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DESIGN_X", 7, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // NT$1 ::= 
                {
                    Object RESULT = null;
                    compi1_proyecto1.Compi1_Proyecto1.updateDestruir((String) (((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value));
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("NT$1", 26, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // DESIGN_X ::= xdestruir igual numero NT$1 puntoComa 
                {
                    Object RESULT = null;
                    // propagate RESULT from NT$1
                    RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DESIGN_X", 7, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 4)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 22: // NT$2 ::= 
                {
                    Object RESULT = null;
                    compi1_proyecto1.Compi1_Proyecto1.updateCreditos((String) (((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value));
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("NT$2", 27, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 23: // DESIGN_X ::= xcreditos igual numero NT$2 puntoComa 
                {
                    Object RESULT = null;
                    // propagate RESULT from NT$2
                    RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DESIGN_X", 7, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 4)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 24: // DESIGN_Y ::= xmeta 
                {
                    Object RESULT = null;
                    compi1_proyecto1.Compi1_Proyecto1.updateTipo("x-meta");
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DESIGN_Y", 8, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 25: // DESIGN_Y ::= xbloque 
                {
                    Object RESULT = null;
                    compi1_proyecto1.Compi1_Proyecto1.updateTipo("x-bloque");
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DESIGN_Y", 8, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 26: // DESIGN_Y ::= xbonus 
                {
                    Object RESULT = null;
                    compi1_proyecto1.Compi1_Proyecto1.updateTipo("x-bonus");
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DESIGN_Y", 8, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 27: // DESIGN_Y ::= xbomba 
                {
                    Object RESULT = null;
                    compi1_proyecto1.Compi1_Proyecto1.updateTipo("x-bomba");
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DESIGN_Y", 8, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 28: // DESIGN_Y ::= xarma 
                {
                    Object RESULT = null;
                    compi1_proyecto1.Compi1_Proyecto1.updateTipo("x-arma");
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DESIGN_Y", 8, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 29: // DESIGN_V ::= ccorchete 
                {
                    Object RESULT = null;
                    compi1_proyecto1.Compi1_Proyecto1.doSomething();
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DESIGN_V", 9, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 30: // NT$3 ::= 
                {
                    Object RESULT = null;
                    compi1_proyecto1.Compi1_Proyecto1.doSomething();
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("NT$3", 28, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 31: // DESIGN_V ::= ccorchete NT$3 coma DESIGN_A 
                {
                    Object RESULT = null;
                    // propagate RESULT from NT$3
                    RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DESIGN_V", 9, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 32: // NT$4 ::= 
                {
                    Object RESULT = null;
                    compi1_proyecto1.Compi1_Proyecto1.updateCategoria("back");
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("NT$4", 29, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 33: // BACK_A ::= aback NT$4 BACK_B 
                {
                    Object RESULT = null;
                    // propagate RESULT from NT$4
                    RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BACK_A", 18, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 34: // BACK_B ::= acorchete BACK_C 
                {
                    Object RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BACK_B", 19, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 35: // BACK_C ::= BACK_D BACK_E BACK_F 
                {
                    Object RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BACK_C", 20, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 36: // BACK_C ::= BACK_E BACK_D BACK_F 
                {
                    Object RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BACK_C", 20, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 37: // BACK_D ::= xnombre pxnombre 
                {
                    Object RESULT = null;
                    compi1_proyecto1.Compi1_Proyecto1.updateName((String) (((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value));
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BACK_D", 21, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 38: // BACK_E ::= ximg igual comilla 
                {
                    Object RESULT = null;
                    compi1_proyecto1.Compi1_Proyecto1.updateImg((String) (((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value));
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BACK_E", 22, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 39: // NT$5 ::= 
                {
                    Object RESULT = null;
                    compi1_proyecto1.Compi1_Proyecto1.doSomething();
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("NT$5", 30, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 40: // BACK_F ::= ccorchete NT$5 BACK_G 
                {
                    Object RESULT = null;
                    // propagate RESULT from NT$5
                    RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BACK_F", 23, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 41: // BACK_G ::= coma BACK_B 
                {
                    Object RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BACK_G", 24, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 42: // BACK_G ::= cback 
                {
                    Object RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BACK_G", 24, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 43: // NT$6 ::= 
                {
                    Object RESULT = null;
                    compi1_proyecto1.Compi1_Proyecto1.updateCategoria("figure");
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("NT$6", 31, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 44: // FIG_START ::= afig NT$6 FIG_A cfig 
                {
                    Object RESULT = null;
                    // propagate RESULT from NT$6
                    RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FIG_START", 11, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 45: // FIG_A ::= acorchete FIG_B FIG_V 
                {
                    Object RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FIG_A", 13, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 46: // FIG_B ::= FIG_Z 
                {
                    Object RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FIG_B", 14, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 47: // FIG_B ::= FIG_Z FIG_B 
                {
                    Object RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FIG_B", 14, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 48: // NT$7 ::= 
                {
                    Object RESULT = null;
                    compi1_proyecto1.Compi1_Proyecto1.updateDestruir((String) (((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value));
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("NT$7", 32, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 49: // FIG_Z ::= xdestruir igual numero NT$7 puntoComa 
                {
                    Object RESULT = null;
                    // propagate RESULT from NT$7
                    RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FIG_Z", 15, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 4)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 50: // FIG_Z ::= xtipo igual FIG_X 
                {
                    Object RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FIG_Z", 15, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 51: // NT$8 ::= 
                {
                    Object RESULT = null;
                    compi1_proyecto1.Compi1_Proyecto1.updateVida(((String) (((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value)));
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("NT$8", 33, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 52: // FIG_Z ::= xvida igual numero NT$8 puntoComa 
                {
                    Object RESULT = null;
                    // propagate RESULT from NT$8
                    RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FIG_Z", 15, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 4)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 53: // FIG_Z ::= xnombre pxnombre 
                {
                    Object RESULT = null;
                    compi1_proyecto1.Compi1_Proyecto1.updateName(((String) (((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value)));
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FIG_Z", 15, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 54: // FIG_Z ::= ximg igual comilla 
                {
                    Object RESULT = null;
                    compi1_proyecto1.Compi1_Proyecto1.updateImg(((String) (((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value)));
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FIG_Z", 15, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 55: // FIG_Z ::= xdescripcion igual comilla 
                {
                    Object RESULT = null;
                    compi1_proyecto1.Compi1_Proyecto1.updateDescripcion(((String) (((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value)));
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FIG_Z", 15, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 56: // FIG_X ::= xheroe 
                {
                    Object RESULT = null;
                    compi1_proyecto1.Compi1_Proyecto1.updateTipo("x-heroe");
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FIG_X", 16, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 57: // FIG_X ::= xenemigo 
                {
                    Object RESULT = null;
                    compi1_proyecto1.Compi1_Proyecto1.updateTipo("x-enemigo");
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FIG_X", 16, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 58: // FIG_V ::= ccorchete 
                {
                    Object RESULT = null;
                    compi1_proyecto1.Compi1_Proyecto1.doSomething();
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FIG_V", 17, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 59: // NT$9 ::= 
                {
                    Object RESULT = null;
                    compi1_proyecto1.Compi1_Proyecto1.doSomething();
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("NT$9", 34, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 60: // FIG_V ::= ccorchete NT$9 coma FIG_A 
                {
                    Object RESULT = null;
                    // propagate RESULT from NT$9
                    RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FIG_V", 17, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number " + CUP$sintactico$act_num + "found in internal parse table");

            }
        } /* end of method */


        /**
         * Method splitting the generated action code into several parts.
         */
        public final java_cup.runtime.Symbol CUP$sintactico$do_action(
                int CUP$sintactico$act_num,
                java_cup.runtime.lr_parser CUP$sintactico$parser,
                java.util.Stack CUP$sintactico$stack,
                int CUP$sintactico$top)
                throws java.lang.Exception {
            return CUP$sintactico$do_action_part00000000(
                    CUP$sintactico$act_num,
                    CUP$sintactico$parser,
                    CUP$sintactico$stack,
                    CUP$sintactico$top);
        }
    }

}
